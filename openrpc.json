{
  "openrpc": "1.0.0-rc0",
  "info": {
    "version": "0.0.1",
    "title": "EnOS OpenRPC API",
    "description": "EnOS backend based on OpenRPC",
    "termsOfService": "https://ethernode.io/terms/",
    "contact": {
      "name": "ethernode support",
      "email": "support@ethernode.io",
      "url": "https://ethernode.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "name": "RPC Listener",
      "url": "localhost:3030/"
    }
  ],
  "methods": [
    {
      "name": "createUser",
      "description": "Creates a new user in the system. Duplicates are not allowed, first user is admin",
      "params": [
        {
          "name": "userName",
          "description": "unique username",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "password",
          "description": "user password",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "createAccountResult",
        "description": "Retures success or error object",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Response weather user creation was a success or error"
            },
            "message": {
              "type": "string",
              "description": "If success, returns info on new user. If error returns error message"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Create User Success Example",
          "description": "example of create user",
          "params": [
            {
              "name": "userName",
              "type": "string",
              "value": "bakon"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "sucess",
            "value": {
              "status": "succes",
              "createAccount": {
                "nodes": [],
                "_id": "5c9d42f39d69c93860c11bda",
                "userName": "bakon4",
                "password": "$2b$10$mzIXwsSi9L6Z1dsqIo/oRO0xpppEudtWa34kXcsmRLTTBfO9BiXi."
              }
            }
          }
        },
        {
          "name": "Create User Error Example",
          "description": "example of create user error",
          "params": [
            {
              "name": "userName",
              "value": "bakon"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    },
    {
      "name": "login",
      "description": "checks for user account and sets login variables and fetches session token.",
      "params": [
        {
          "name": "userName",
          "description": "User Name to fetch",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "password",
          "description": "user password to decode oneway hash password",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "loginRes",
        "description": "Status of user login true if user exists and password match, you will also receive an auth token, that has to be send with every other api call afterwards ",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Response weather creation was a success or error"
            },
            "message": {
              "type": "string",
              "description": "If success, returns info on new user and nodes. If error returns error message"
            }
          }
        }
      },
      "examples": [
        {
          "name": "login User Success Example",
          "description": "example of susccefull login",
          "params": [
            {
              "name": "userName",
              "type": "string",
              "value": "bakon"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "sucess",
            "value": {
              "result": {
                "status": "success",
                "message": "Auth Success",
                "user": [
                  {
                    "nodes": [
                      {
                        "nodeId": "8ef49f01b1c400d660802aba3e671dfc86eb59175c24bb0a26436f67e11819f4",
                        "nodeName": "etc-full",
                        "nodeNetwork": "classic"
                      },
                      {
                        "nodeId": "8108dc96ac13e4c4c56ec6e43e2371a316176322cdfa1572276612fc577619b0",
                        "nodeName": "kotti-full",
                        "nodeNetwork": "kotti"
                      },
                      {
                        "nodeId": "6e084ae85ad5f1aec93d7c7c70db44b0489b7a35e07e6f08e065f7407014edc3",
                        "nodeName": "etc-fast",
                        "nodeNetwork": "classic"
                      }
                    ],
                    "_id": "5c8ed3b654ab7b0efcde242f",
                    "userName": "bakon",
                    "password": "$2b$10$Gj1W.4L2M6FeClmDmbhlaeSLXtdVLk3MxmrInrDvwE83gBEt7QZMa",
                    "__v": 0
                  }
                ],
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWM4ZWQzYjY1NGFiN2IwZWZjZGUyNDJmIiwiaWF0IjoxNTUzODIzMTk1fQ.7f06McVnooMk6TV-TaZwRGTFuChBcH0WJIJq5QnTGZU"
              }
            }
          }
        },
        {
          "name": "Login User Error Example",
          "description": "Example of login user error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    },
    {
      "name": "getUser",
      "description": "Gets single user account based on userName provided",
      "params": [
        {
          "name": "Auth_Token",
          "description": "Authorization token you receive at login, needs to be assed in header as Key: Authorization, Value: BEARER {{token}}",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "userName",
          "description": "userName to get info on",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "getUserResult",
        "description": "If user exists return user info to include nodes user is running",
        "schema": {
          "type": "object",
          "required": [
            "response"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "Response weather creation was a success or error"
            },
            "message": {
              "type": "string",
              "description": "If success returns uer info. If error returns error message"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Get User Info Success Example",
          "description": "example of susccefull user info fetch",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "sucess",
            "value": {
              "result": {
                "status": "success",
                "account": {
                  "nodes": [
                    {
                      "nodeId": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf",
                      "nodeName": "kotti-full",
                      "nodeNetwork": "kotti"
                    }
                  ],
                  "_id": "5c8ed3b654ab7b0efcde242f",
                  "userName": "bakon",
                  "password": "$2b$10$Gj1W.4L2M6FeClmDmbhlaeSLXtdVLk3MxmrInrDvwE83gBEt7QZMa",
                  "__v": 0
                },
                "accounts": "yes"
              }
            }
          }
        },
        {
          "name": "Get User Info Error Example",
          "description": "Example of error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {}
            }
          }
        }
      ]
    },
    {
      "name": "addNode",
      "description": "Spin up a docker container with node settings specified in the dashboard",
      "params": [
        {
          "name": "Auth_Token",
          "description": "Authorization token you receive at login, needs to be assed in header as Key: Authorization, Value: BEARER {{token}}",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "userName",
          "description": "userName to create the node for",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "nodeName",
          "description": "name your node fo easy identification",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "nodeNetwork",
          "description": "Which network is this node for current choice, --classic and --kotti are only supported at this stage",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "syncType",
          "description": "Choose between LIGHT, FAST, FULL, FUll - Archive sync",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "addNodeResult",
        "description": "Return node creations status",
        "schema": {
          "type": "object",
          "required": [
            "response"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "Response weather creation was a success or error"
            },
            "message": {
              "type": "string",
              "description": "If success returns node container info"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Add Node Success Example",
          "description": "example of susccefull node added",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "nodeName",
              "type": "string",
              "value": "kotti-full"
            },
            {
              "name": "nodeNetwork",
              "type": "string",
              "value": "kotti"
            },
            {
              "name": "syncType",
              "type": "string",
              "value": "full"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success",
                "message": "Node Added",
                "data": {
                  "containerID": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
                }
              }
            }
          }
        },
        {
          "name": "Add Node Error Example",
          "description": "Example of error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {}
            }
          }
        }
      ]
    },
    {
      "name": "removeNode",
      "description": "Remove the docker container that is running the selected node to remove",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "name": "containerId",
          "description": "docker container ID to remove, returned with getUser method",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "nodeName",
          "description": "User assigned name for node",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "removeNodeResult",
        "description": "Returns status of node deletion",
        "schema": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Response weather creation was a success or error"
            },
            "message": {
              "type": "string",
              "description": "If success returns info on new user if error returns error message"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Node Destroy Success Example",
          "description": "Example of node detroy success",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "containerId",
              "type": "string",
              "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success"
              }
            }
          }
        },
        {
          "name": "Node Destroy Error Example",
          "description": "Example of node destroy error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "containerId",
              "type": "string",
              "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {
                "error": "error message"
              }
            }
          }
        }
      ]
    },
    {
      "name": "getNodeContainerInfo",
      "description": "Inspect the docker container which is running the node",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "name": "containerId",
          "description": "docker container ID to inspect, returned with getUser method",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "getNodeContainerInfoResult",
        "description": "Returns infromation about the docker contianer that is running the node client",
        "schema": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns Success or Error"
            },
            "message": {
              "type": "string",
              "description": "If success returns info about docker contianer node is running on. If Error returns error"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Node container info Success Example",
          "description": "example of successful node info fetch",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "containerId",
              "type": "string",
              "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success",
                "nodeInspect": {
                  "containerID": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf",
                  "containerCreated": "2019-03-29T03:16:10.371956508Z",
                  "containerState": "running",
                  "NetWorkSettings": {
                    "containerIP": "172.17.0.3",
                    "rcpPort": "33076"
                  }
                },
                "nodeData": {
                  "_id": "5c8ed3b654ab7b0efcde242f",
                  "nodes": [
                    {
                      "nodeId": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf",
                      "nodeName": "kotti-full",
                      "nodeNetwork": "kotti"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "name": "Node container info Error Example",
          "description": "Example of error",
          "params": [
            {
              "name": "userName",
              "value": "bakon"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {
                "error": "error message"
              }
            }
          }
        }
      ]
    },
    {
      "name": "web3_clientVersion",
      "description": "Returns the current client version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "name": "nodeName",
          "description": "unode name used for the query return with getUser method",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "nodeNetwork",
          "description": "node name used for the query, obtained with getUser method",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "method",
          "description": "method being called, web3_clientVersion",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "params",
          "description": "Parameters required for the web3 call, none",
          "required": true,
          "schema": {
            "type": "array"
          }
        }
      ],
      "result": {
        "name": "web3_clientVersionResult",
        "description": "Returns the current client version",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns the current client version"
            },
            "message": {
              "type": "string",
              "description": "If success retures node client version. If error returns error message"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Display Client Version Success",
          "description": "Example of web3_clientVersion",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "web3_clientVersion",
            "value": {
              "result": {
                "jsonrpc": "2.0",
                "id": 42,
                "result": "Geth/bakon-kotti-full/v1.8.23-stable-f1b192d5/linux-arm64/go1.10.4"
              }
            }
          }
        },
        {
          "name": "Node Query Error",
          "description": "node query error example",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    },
    {
      "name": "net_version",
      "description": "Returns the current client version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "name": "nodeName",
          "description": "unode name used for the query return with getUser method",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "nodeNetwork",
          "description": "node name used for the query, obtained with getUser method",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "method",
          "description": "method being called, net_version",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "params",
          "description": "Parameters required for the web3 call, none",
          "required": true,
          "schema": {
            "type": "array"
          }
        }
      ],
      "result": {
        "name": "net_versionResult",
        "description": "Returns the current network id.",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns the current network id."
            },
            "message": {
              "type": "string",
              "description": "If success Returns the current network id.. If error returns error message"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Returns the current network id.",
          "description": "Example Returns the current network id.",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "net_version",
            "value": {
              "result": {
                "jsonrpc": "2.0",
                "id": 42,
                "result": "6"
              }
            }
          }
        },
        {
          "name": "Node Query Error",
          "description": "node query error example",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    }
  ],
  "components": {
    "contentDescriptors": {
      "nodeName": {
        "name": "userName",
        "description": "user name",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "examples": {
      "userName": {
        "name": "userName",
        "type": "string",
        "summary": "user of the name",
        "description": "Im not sure how else to say it",
        "value": "bakon"
      },
      "nodeName": {
        "name": "nodeName",
        "type": "string",
        "summary": "name of node in question",
        "description": "just the name of the node",
        "value": "kotti-full"
      },
      "nodeNetwork": {
        "name": "nodeNetwork",
        "type": "string",
        "summary": "blockchain netowrk of the node is running",
        "description": "Im not sure how else to say it",
        "value": "kotti"
      }
    }
  }
}